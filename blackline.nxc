#include "NXCDefs.h"
#include "HTSMUX-driver.h"

long intzeroval;
bool flag1;
bool flag2;
bool DirectionRight;
#define Geschw 80
#define Schwarzwert 50
#define ramp 50

 void StartTiming()
 {
      intzeroval = CurrentTick();
 }
 
 long ReturnTime()
 {
      return (CurrentTick() - intzeroval);
 }
 
int backtime = 800;
int turntime = 750;

int evadetime = 2000;
int fortime = 3500 ;

void turnLeft()
{
      OnFwd(OUT_B, 100);
      OnRev(OUT_C, 100);
}
void turnRight()
{
      OnRev(OUT_B, 100);
      OnFwd(OUT_C, 100);
}

void asyncStartAvoidCollision()
{
      Off(OUT_BC);
      OnRev(OUT_BC, 80);
      Wait(backtime);
      Off(OUT_BC);
      turnLeft();
      Wait(turntime);
      Off(OUT_BC);
      OnFwd(OUT_BC, 80);
      Wait(evadetime);
      turnRight();
      Wait(turntime);
      OnFwd(OUT_BC, 80);
      Wait(fortime);
      Off(OUT_BC);
      turnRight();
      Wait(turntime);
      Off(OUT_BC);
      OnFwd(OUT_BC, 80);
      while(SENSOR_2 > Schwarzwert &&  SENSOR_3 > Schwarzwert)
      {
           OnFwd(OUT_BC, 80);
           Wait(1);
      }
       Wait(200);
      turnLeft();
      Wait(turntime);
      Off(OUT_BC);
      }
 void TurnLeft(bool Links, bool flag1)
 {
      long time=ReturnTime();
      /*if(time <= 100 && Links==true)
      {
          Off(OUT_B);
          OnRev(OUT_C, 70);
          Wait(500);
          Off(OUT_C);
      }   */
      OnFwd(OUT_B, 80);
      OnRev(OUT_C, 100);
      Wait(6);
      Off(OUT_BC);
      Links = false;
      flag1= true;
      StartTiming();
 }

 void TurnRight(bool Links, bool flag1)
 {
        long time=ReturnTime();
       /* if(time <= 100 && Links==false)
        {
            Off(OUT_C);
            OnRev(OUT_B, 50);
            Wait(500);
            Off(OUT_B);
        }    */
        OnFwd(OUT_C, 80);
        OnRev(OUT_B, 100);
        Wait(6);
        Off(OUT_BC);
        Links = true;
        flag2=true;
        StartTiming();
 }
 bool flag(bool flag)
 {
     if(flag==true)
     {
         StartTiming();
         flag = false;
     }
     return(flag);
 }
 void InitSensors()
{
      SetSensor(S1, SENSOR_LOWSPEED);
      if (!HTSMUXscanPorts(S1))
      {
         // Scan failed, handle the error
         TextOut(0, LCD_LINE1, "Scan failed!");
         Wait(1000);
      }
      SetSensorLight(IN_3);
      SetSensorLight(IN_2);
      SetSensorLowspeed(IN_4);
      //Sensor Testen...

}
 task main()
 {
      InitSensors();
      StartTiming();
      bool Links;
      while(true)
      {
        OnRev(OUT_A, 30);
        if(smuxReadSensorLegoTouch(msensor_S1_4))
        {
            asyncStartAvoidCollision();
        }
        //Check Accel
        {
            int x, y, z;
            ReadSensorHTAccel(S4, x, y, z);
            /*TextOut(0,  LCD_LINE1, "x:     ");
            NumOut(6*2, LCD_LINE1, x);
            TextOut(0,  LCD_LINE2, "y:     ");
            NumOut(6*2, LCD_LINE2, y);
            TextOut(0,  LCD_LINE3, "z:     ");
            NumOut(6*2, LCD_LINE3, z);   */
            
            //x is significant
            if (x > ramp)
            {
               //fuigas
            }
        }
        

        
        OnFwd(OUT_BC,Geschw);
        Wait(1);
        //Off(OUT_BC);
         int time = ReturnTime();
        while(SENSOR_3 < Schwarzwert)
        {
             TurnLeft(Links,flag1);
             DirectionRight = false;


        }
        flag1 = flag(flag1);
        while(SENSOR_2 < Schwarzwert)
        {
            TurnRight(Links,flag2);
            DirectionRight = true;
        }
        flag2 = flag(flag2);

        if(time > 1000)  //Wenn der Roboter 500ms keine Linie sieht, Zeit ggf erhöhen
        {
             //AvoidSpaceOnDirectionRight
             if(DirectionRight == true)
             {
                 while(SENSOR_2 > Schwarzwert &&  SENSOR_3 > Schwarzwert)
                 {
                     if(smuxReadSensorLegoTouch(msensor_S1_4))
                     {
                           asyncStartAvoidCollision();
                     }
                 OnFwd(OUT_B, 50);
                 OnFwd(OUT_C, 20);
                 Wait(1);
                 Off(OUT_BC);
                 //Der Roboter fährt gerade länger nach Rechts, fahre zurück auf die Strecke(bis Lichtsensor)
                 }
             }
             
             else
             {   while(SENSOR_2 > Schwarzwert &&  SENSOR_3 > Schwarzwert)
                 {
                      if(smuxReadSensorLegoTouch(msensor_S1_4))
                      {
                           asyncStartAvoidCollision();
                      }
                 OnFwd(OUT_C, 50);
                 OnFwd(OUT_B, 20);
                 Wait(1);
                 Off(OUT_BC);
                 }
                 //Der Roboter fährt gerade länger nach links, fahre zurück auf die Strecke(bis Lichtsensor)
             }

        }
        

      }
 }




