#include "NXCDefs.h"
#include "HTSMUX-driver.h"

long intzeroval;
bool flag1;
bool flag2;
bool DirectionRight;
int time;
int sensorTime;
byte count;
#define Geschw 80
#define Schwarzwert 50
#define ramp 50

 void StartTiming()
 {
      intzeroval = CurrentTick();
      sensorTime = CurrentTick();
 }
 void StartGreenLine()
 {
      sensorTime = CurrentTick();
 }

 long ReturnTime()
 {
      return (CurrentTick() - intzeroval);
 }
 
 long ReturnSensorTime()
 {
      return (CurrentTick() - sensorTime);
 }

int backtime = 800;
int turntime = 500;

int evadetime = 1500;
int fortime = 3000;

void turnLeft()
{
      OnFwd(OUT_B, 100);
      OnRev(OUT_C, 100);
}
void turnRight()
{
      OnRev(OUT_B, 100);
      OnFwd(OUT_C, 100);
}

void asyncStartAvoidCollision() {
      TextOut(0, LCD_LINE1, "dafuq");
      Off(OUT_BC);
      OnRev(OUT_BC, 80);
      Wait(backtime);
      Off(OUT_BC);
      turnLeft();
      Wait(turntime);
      Off(OUT_BC);
      OnFwd(OUT_BC, 80);
      Wait(evadetime);
      turnRight();
      Wait(turntime);
      OnFwd(OUT_BC, 80);
      Wait(fortime);
      Off(OUT_BC);
      turnRight();
      Wait(turntime);
      Off(OUT_BC);
      OnFwd(OUT_BC, 80);
      ClearScreen();
      while((SENSOR_2 > Schwarzwert) &&  (SENSOR_3 > Schwarzwert))
      {
           TextOut(0, LCD_LINE1, "dafuq");
           OnFwd(OUT_BC, 80);
           Wait(1);
      }
       Wait(200);
      turnLeft();
      Wait(turntime);
      Off(OUT_BC);
      }
 void TurnLeft()
 {
      OnFwd(OUT_B, 80);
      OnRev(OUT_C, 100);
      Wait(6);
      Off(OUT_BC);
      StartTiming();
 }

 void TurnRight()
 {
        OnFwd(OUT_C, 80);
        OnRev(OUT_B, 100);
        Wait(6);
        Off(OUT_BC);
        StartTiming();
 }
 void InitSensors()
{
      SetSensorLight(IN_3);
      SetSensorLight(IN_2);
      SetSensorLowspeed(IN_1);
      SetSensorColorFull(IN_4);
      //SetSensor(S4, SENSOR_TOUCH);
      //Sensor Testen...
      if (!HTSMUXscanPorts(S1))
      {
         // Scan failed, handle the error
         TextOut(0, LCD_LINE1, "Scan failed!");
         Wait(1000);
      }
}
/*MULTIPLEXER KONFIGURATION*/

     //Ultraschall:          1
     //Acceleration:         2
     //Touch hinten:         3
     //Touch vorne:          4
     
/*END OF MULTIPLEXER KONFIGURATION*/

/*SENSOR DATA READING*/
bool isAbleToCheck()
{
     TextOut(0, LCD_LINE3, "                ");
     NumOut(0, LCD_LINE3, count);
     if(count == 0)
     {
          return true;
     }
     return false;
}
void HandleCounting()
{
     ++count;
     if(count >= 100)
     {
         count = 0;
     }

}

bool ReadAccel(int &x, int &y, int &z)
{
     if(isAbleToCheck())
     {
          smuxReadSensorHTAccel(msensor_S1_2, x, y, z);
          return true;
     }
     return false;
}

bool ReadFrontTouch()
{
     if(isAbleToCheck())
     {
          return smuxReadSensorLegoTouch(msensor_S1_4);
     }
     return false;
}

bool ReadBackTouch()
{
     if(isAbleToCheck())
     {
          return smuxReadSensorLegoTouch(msensor_S1_3);
     }
     return false;
}

byte ReadUltrasonic()
{
    if(isAbleToCheck())
    {
         return smuxSensorLegoUS(msensor_S1_1);
    }
}
/*END OF SENSOR DATA READING*/

task main()
{
     sensorTime = 3000;
     InitSensors();
     StartTiming();
     bool Links;
     while(true)
     {
         HandleCounting();
         NumOut(6*2, LCD_LINE1, SENSOR_4);
         if(ReadFrontTouch())
         {
             asyncStartAvoidCollision();
         }
          //Check Accel

        int x, y, z;
        if(ReadAccel(x, y, z))
        {
              ClearScreen();
              TextOut(0,  LCD_LINE1, "x:     ");
              NumOut(6*2, LCD_LINE1, x);
              TextOut(0,  LCD_LINE2, "y:     ");
              NumOut(6*2, LCD_LINE2, y);
              TextOut(0,  LCD_LINE3, "z:     ");
              NumOut(6*2, LCD_LINE3, z);
        }

          
          
        if (x > ramp)
        {
            //fuigas
        }
        
        byte color = SENSOR_4;
        switch(color)
        {
             case 3:
                StartGreenLine();
             break;
             
             default:
             break;
        }
        
        TextOut(0, LCD_LINE2, "            ");
        TextOut(0, LCD_LINE2, "Grade aus");
        OnFwd(OUT_BC,Geschw);
        Wait(10);
        Off(OUT_BC);
        time = ReturnTime();
        while((SENSOR_3 < Schwarzwert) && (ReturnSensorTime() > 2000))
        {
             HandleCounting();
             TextOut(0, LCD_LINE2, "            ");
             TextOut(0, LCD_LINE2, "TurnLeft");
             if(ReadFrontTouch())
             {
                 asyncStartAvoidCollision();
             }
             TurnLeft();
             DirectionRight = false;


        }
        while(SENSOR_2 < Schwarzwert)
        {
            HandleCounting();
            TextOut(0, LCD_LINE2, "            ");
            TextOut(0, LCD_LINE2, "TurnRight");
            if(ReadFrontTouch())
            {
                 asyncStartAvoidCollision();
            }
            TurnRight();
            DirectionRight = true;
        }

        if(time > 1000)  //Wenn der Roboter 1000ms keine Linie sieht, Zeit ggf erhöhen
        {
             TextOut(0, LCD_LINE2, "            ");
             TextOut(0, LCD_LINE2, "Time");
             //AvoidSpaceOnDirectionRight
             if(DirectionRight == true)
             {
                 while(SENSOR_2 > Schwarzwert &&  SENSOR_3 > Schwarzwert)
                 {
                     HandleCounting();
                     if(ReadFrontTouch())
                     {
                          asyncStartAvoidCollision();
                     }
                     OnFwd(OUT_B, 50);
                     OnFwd(OUT_C, 20);
                     Wait(10);
                     Off(OUT_BC);
                     //Der Roboter fährt gerade länger nach Rechts, fahre zurück auf die Strecke(bis Lichtsensor)
                 }
             }

             else
             {   while(SENSOR_2 > Schwarzwert &&  SENSOR_3 > Schwarzwert)
                 {
                      HandleCounting();
                      if(ReadFrontTouch())
                      {
                           asyncStartAvoidCollision();
                      }
                      OnFwd(OUT_C, 50);
                      OnFwd(OUT_B, 20);
                      Wait(10);
                      Off(OUT_BC);
                      //Der Roboter fährt gerade länger nach links, fahre zurück auf die Strecke(bis Lichtsensor)

                 }

             }
        }
      }
 }




