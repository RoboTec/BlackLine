#include "NXCDefs.h"
#include "HTSMUX-driver.h"

#define Schwarzwert 53
#define Silberwert2 70
#define Silberwert3 65
#define ramp 70
#define Speednorm 100
#define stime 2000

//Variablen
long intzeroval;
int GreenAttempts;
bool DownFloor;
byte count;
int backtime = 800;
int turntime = 800;
int evadetime = 1500;
int fortime = 3000;
long sensorTime;
byte SpeedLeft;
byte SpeedRight;
int time;
bool DirectionRight;
int x, y, z;
long SLTime;

//Funktionen
void InitSensors()
{
     SetSensorLight(IN_3);
     SetSensorLight(IN_2);
     SetSensorLowspeed(IN_1);
     SetSensorColorFull(IN_4);
     //SetSensor(S4, SENSOR_TOUCH);
     //Sensor Testen...
     if (!HTSMUXscanPorts(S1))
     {
        // Scan failed, handle the error
        TextOut(0, LCD_LINE1, "Scan failed!");
        Wait(1000);
     }
     smuxSetSensorLegoLight(msensor_S1_3, true);
}
void StartTiming()
{
     intzeroval = CurrentTick();
}
void StartSL()
{
     SLTime = CurrentTick();
}
long ReturnSLTime()
{
      return (CurrentTick() - SLTime);
}
void HandleCounting()
{
     ++count;
     if(count >= 50)
     {
         count = 0;
     }
}
bool isAbleToCheck()
{
     TextOut(0, LCD_LINE3, " ");
     NumOut(0, LCD_LINE3, count);
     if(count == 0)
     {
          return true;
     }
     return false;
}
bool ReadFrontTouch()
{
     if(isAbleToCheck())
     {
          return smuxReadSensorLegoTouch(msensor_S1_4);
     }
     return false;
}
void evadeLeft()
{
      OnFwd(OUT_B, 100);
      OnRev(OUT_C, 100);
}
void evadeRight()
{
      OnRev(OUT_B, 100);
      OnFwd(OUT_C, 100);
}
void AvoidCollision()
{
      Off(OUT_BC);
      OnRev(OUT_BC, 80);
      Wait(backtime);
      Off(OUT_BC);

      evadeLeft();
      Wait(turntime);
      Off(OUT_BC);

      OnFwd(OUT_BC, 80);
      Wait(evadetime);

      evadeRight();
      Wait(turntime);

      OnFwd(OUT_BC, 80);
      Wait(fortime);
      Off(OUT_BC);

      evadeRight();
      Wait(turntime);
      Off(OUT_BC);

      OnFwd(OUT_BC, 80);
      Wait(evadetime-1000);
      ClearScreen();
      while((SENSOR_2 > Schwarzwert) && (SENSOR_3 > Schwarzwert))
      {
           OnFwd(OUT_BC, 80);
           Wait(1);
      }
      Wait(200);
      evadeLeft();
      Wait(turntime);
      Off(OUT_BC);
}
bool ReadAccel(int &x, int &y, int &z)
{
     if(isAbleToCheck())
     {
          smuxReadSensorHTAccel(msensor_S1_2, x, y, z);
          return true;
     }
     return false;
}
void driveRamp()
{
     OnFwdReg(OUT_BC, 100, 2);
     Wait(10000);
}
void StartGreenLine()
{
     sensorTime = CurrentTick();
}
void CheckForLongSync()
{
     if(ReadFrontTouch())
     {
         AvoidCollision();
     }

     if(ReadAccel(x, y, z))
     {

         if(x > ramp || x < -ramp)
         {
              driveRamp();
         }
     }
     int color = SENSOR_4;
     switch(color)
     {
         case 3:
              PlayTone(5000, 20);

              GreenAttempts += 1;
              if(GreenAttempts > 5)
              {
                  StartGreenLine();
              }

         break;
         default:
              GreenAttempts = 0;
         break;
     }
     if((SENSOR_2 > Silberwert2) || (SENSOR_3 > Silberwert3))
     {
         DownFloor = false;
     }
}
long ReturnTime()
{
     return (CurrentTick() - intzeroval);
}
void TurnRight()
{
     SpeedLeft = -100;
     SpeedRight = 80;
     DirectionRight = true;
     StartTiming();
}
void TurnLeft()
{
     SpeedLeft = 80;
     SpeedRight = -100;
     DirectionRight = false;
     StartTiming();
}
long ReturnSensorTime()
{
     return (CurrentTick() - sensorTime);
}
void Align()
{
     //an Alufolie ausrichten
     if(SENSOR_3 > Silberwert3)
          {
              while((SENSOR_3 < Silberwert3) || (SENSOR_2 < Silberwert2))
              {
                  if(SENSOR_3 < Silberwert3)
                  {
                      OnFwd(OUT_C, -30);
                  }
                  if(SENSOR_2 < Silberwert2)
                  {
                      OnFwd(OUT_B, 100);
                  }
              }
          }
          if(SENSOR_2 > Silberwert2)
          {
              while((SENSOR_3 < Silberwert3) || (SENSOR_2 < Silberwert2))
              {
                  if(SENSOR_2 < Silberwert2)
                  {
                      OnFwd(OUT_B, -30);
                  }
                  if(SENSOR_3 < Silberwert3)
                  {
                      OnFwd(OUT_C, 100);
                  }
              }
          }
}
void DoRotations(long degrees, char pwr, int iterations, int rl)
{
     for(int i = 0; i < iterations; i++)
     {
         RotateMotorEx(OUT_BC, -pwr, degrees, rl,true,true);
     }
}
int ReadBackLight()
{
     if(isAbleToCheck())
     {
          return smuxSensorLegoLightNorm(msensor_S1_3);
     }
     return 0;
}
int ReadSideLight()
{
     if(isAbleToCheck())
     {
          return smuxSensorLegoLightNorm(msensor_S1_1);
     }
     return 0;
}
void LongLine()
{
     DoRotations(2160, 100, 1,3);
}
void TurnRightUpper()
{
     DoRotations(400,100,1,60);
}
bool CheckForDose()
{
     RotateMotor(OUT_A, -80, 180);
     NumOut(0, LCD_LINE6, ReadBackLight());
     if(ReadBackLight() > 60)
     {
                     OnFwd(OUT_A, -100);
                     Wait(1000);
                     return true;
     }
     RotateMotor(OUT_A, 80, 180);
     return false;
}
long MiniLine()
{

     int counter = 0;
     long averagevalue = 0;
     StartSL();
     while(ReturnSLTime() < 1200)
     {
          NumOut(0,LCD_LINE5,ReturnSLTime());
          OnRevReg(OUT_BC,100,OUT_REGMODE_SYNC);
          counter++;
          averagevalue +=  ReadSideLight();
     }
     averagevalue = averagevalue/counter;
     Off(OUT_BC);
     return averagevalue;
}
void MicroLine()
{
    DoRotations(360,100,1,3);
}

task main()
{
     InitSensors();
     StartTiming();
     GreenAttempts = 0;
     DownFloor = false;
     while(DownFloor)
     {
                     HandleCounting();
                     CheckForLongSync();
                     SpeedLeft = Speednorm;
                     SpeedRight = Speednorm;
                     time = ReturnTime();
                     if(SENSOR_2 < Schwarzwert)
                     {
                              TurnRight();
                     }
                     if((SENSOR_3 < Schwarzwert) && (ReturnSensorTime() > stime))
                     {
                              TurnLeft();
                     }
                     if((time > 1000) && (ReturnSensorTime() > stime))
                     {
                              if(DirectionRight == true)
                              {
                                  SpeedLeft = 50;
                                  SpeedRight = 30;
                              }
                              else
                              {
                                  SpeedLeft = 30;
                                  SpeedRight = 50;
                              }
                     }
                     if(DownFloor == false)
                     {
                              Align();
                     }
                     OnRev(OUT_A, 70);
                     OnFwd(OUT_B, SpeedLeft);
                     OnFwd(OUT_C, SpeedRight);
                     Wait(20);
                     Off(OUT_BC);
     }
     while(DownFloor == false)
     {
                     //umdrehen nicht vergessen!!
                     //Greifarm öffnen!!
                     LongLine();
                     CheckForDose();
                     TurnRightUpper();
                     int val = MiniLine();
                     NumOut(0,LCD_LINE1,val);
                     CheckForDose();
                     TurnRightUpper();
                     MicroLine();
                     CheckForDose();
                     TurnRightUpper();
                     val = MiniLine();
                     NumOut(0,LCD_LINE1,val);
                     CheckForDose();
                     Wait(50000000);
                     //nicht fertig
     }
}
